{
	"trie1": {
		"prefix": "_trie1",
		"body": [
			"#include <iostream>",
			"#include <string.h>",
			"#include <bits/stdc++.h>",
			"#define Alphabet_size 26",
			"",
			"using namespace std;",
			"",
			"struct TrieNode",
			"{",
			"    struct TrieNode *children[Alphabet_size];",
			"",
			"    bool isLeaf;",
			"};",
			"",
			"struct TrieNode *createNode()",
			"{",
			"    struct TrieNode *pNode = new TrieNode;",
			"",
			"    for (int i = 0; i < Alphabet_size; i++)",
			"        pNode->children[i] = NULL;",
			"",
			"    pNode->isLeaf = false;",
			"",
			"    return pNode;",
			"};",
			"",
			"void insert_node(struct TrieNode *root, char *key)",
			"{",
			"    int level;",
			"    int length = strlen(key);",
			"    struct TrieNode *pCrawl = root;",
			"",
			"    for (level = 0; level < length; level++)",
			"    {",
			"        int index = key[level] - 'a';",
			"",
			"        if (pCrawl->children[index] == NULL)",
			"            pCrawl->children[index] = createNode();",
			"",
			"        pCrawl = pCrawl->children[index];",
			"    }",
			"",
			"    pCrawl->isLeaf = true;",
			"}",
			"",
			"bool isLeafNode(struct TrieNode *root)",
			"{",
			"    return root->isLeaf != false;",
			"}",
			"",
			"bool isEmpty(TrieNode *root)",
			"{",
			"    for (int i = 0; i < Alphabet_size; i++)",
			"        if (root->children[i])",
			"            return false;",
			"    return true;",
			"}",
			"",
			"TrieNode *remove(TrieNode *root, string key, int depth = 0)",
			"{",
			"    if (!root)",
			"        return NULL;",
			"",
			"    if (depth == key.size())",
			"    {",
			"        if (root->isLeaf)",
			"            root->isLeaf = false;",
			"",
			"        if (isEmpty(root))",
			"        {",
			"            delete (root);",
			"            root = NULL;",
			"        }",
			"",
			"        return root;",
			"    }",
			"    int index = key[depth] - 'a';",
			"    root->children[index] =",
			"        remove(root->children[index], key, depth + 1);",
			"",
			"    if (isEmpty(root) && root->isLeaf == false)",
			"    {",
			"        delete (root);",
			"        root = NULL;",
			"    }",
			"",
			"    return root;",
			"}",
			"",
			"void display(struct TrieNode *root, char str[], int level)",
			"{",
			"",
			"    if (isLeafNode(root))",
			"    {",
			"        str[level] = '\\0';",
			"        cout << str << endl;",
			"    }",
			"",
			"    int i;",
			"    for (i = 0; i < Alphabet_size; i++)",
			"    {",
			"        if (root->children[i])",
			"        {",
			"            str[level] = i + 'a';",
			"            display(root->children[i], str, level + 1);",
			"        }",
			"    }",
			"}",
			"",
			"bool search(struct TrieNode *root, string key)",
			"{",
			"    struct TrieNode *pCrawl = root;",
			"",
			"    for (int i = 0; i < key.length(); i++)",
			"    {",
			"        int index = key[i] - 'a';",
			"        if (!pCrawl->children[index])",
			"            return false;",
			"",
			"        pCrawl = pCrawl->children[index];",
			"    }",
			"",
			"    return (pCrawl->isLeaf);",
			"}",
			"",
			"int main()",
			"{",
			"    int n;",
			"    cout << \"Enter no. of keys : \" << endl;",
			"    cin >> n;",
			"    cout << \"Enter the keys : \" << endl;",
			"    char keys[n][n];",
			"    for (int i = 0; i < n; i++)",
			"    {",
			"        cin >> keys[i];",
			"    }",
			"",
			"    struct TrieNode *root = createNode();",
			"",
			"    for (int j = 0; j < n; j++)",
			"        insert_node(root, keys[j]);",
			"",
			"    int level = 0;",
			"    string searchkey;",
			"    string deletekey;",
			"    char str[20];",
			"    cout << \"\\n\\n\";",
			"    cout << \"Displaying Trie : \" << endl;",
			"    display(root, str, level);",
			"    cout << \"\\n\\n\";",
			"    cout << \"Enter key to be searched : \" << endl;",
			"    cin >> searchkey;",
			"",
			"    if (search(root, searchkey))",
			"    {",
			"        cout << \"Key is present\" << endl;",
			"    }",
			"    else",
			"    {",
			"        cout << \"Key is not present\" << endl;",
			"    }",
			"    cout << \"\\n\\n\";",
			"    cout << \"Enter the key to be deleted : \" << endl;",
			"    cin >> deletekey;",
			"    remove(root, deletekey);",
			"    if (!search(root, deletekey))",
			"    {",
			"        cout << \"After deletion : \" << endl;",
			"        cout << deletekey << \" : Key is not present\" << endl;",
			"    }",
			"}"
		],
		"description": ""
	}
}
